/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.Conexion;
import Clases.Medico;
import net.sf.jasperreports.engine.util.MaxFontSizeFinder;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author UNI
 */
public class AgregarMedico extends javax.swing.JInternalFrame {
	
	
	private boolean saved = false;
	private int ID_M;

    /**
     * Creates new form AgregarDoctor
     */
    public AgregarMedico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbEspecialidad = new javax.swing.JComboBox();
        btnGuardar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Agregar Medico");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(4, 2, 0, 12));
        
        /**Author: acastellanos
         * Issue: #4
         * Motive: Se agrego el caracter * para indicar que es un campo oblicatorio
         * **/

        jLabel7.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel7.setText("Nombres (*)");
        jPanel2.add(jLabel7); 
        
      

        txtNombre.setDoubleBuffered(true);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        jPanel2.add(txtNombre);

        jLabel10.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel10.setText("Apellidos (*)");
        jPanel2.add(jLabel10);

        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });
        jPanel2.add(txtApellido);

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 14)); // NOI18N
        jLabel8.setText("Especialidad");
        jPanel2.add(jLabel8);

        cmbEspecialidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        jPanel2.add(cmbEspecialidad);
        
        /**Author: acastellanos
         * Issue: #4
         * Motive: se agrego el boton guardar
         * **/
        
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1435355589_floppy.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }

			private void btnGuardarActionPerformed(ActionEvent evt) {
				// TODO Auto-generated method stub
				Guardar();
			}
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1435355686_pencil.png"))); // NOI18N
        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1435357592_Timetable.png"))); // NOI18N
        
        
        /**Author: acastellanos
         * Issue: #4
         * Motive: se agrego una validacion para el texto del boton
         * **/
        
        if(saved==false) 
        jButton2.setText("Agregar Horario");
        else 
        jButton2.setText("Modificar Horario");
        
        
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/1435355601_sign-error.png"))); // NOI18N
        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                    	.addContainerGap()
                        .addComponent(btnGuardar)
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addGap(10, 10, 10)
                        .addComponent(jButton2)
                        .addGap(10, 10, 10)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)))
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(btnGuardar)
                	.addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 684, 349);
    }// </editor-fold>//GEN-END:initComponents

    /**Author: acastellanos
     * Issue: #4
     * Motive: create this method for save doctor
     * **/
   
    public void Guardar() {
    	String Nombre = txtNombre.getText().trim();
        String Apellido = txtApellido.getText().trim();
        int cmbEsp = cmbEspecialidad.getSelectedIndex();
        int ID_Especialidad = ID_Esp[cmbEsp];
        if("".equals(Nombre)||"".equals(Apellido)||cmbEsp==0)
            //||"<Seleccione>".equals(HoraFinal)
       //     ||"<Seleccione>".equals(HoraInicio))
    {
                JOptionPane.showMessageDialog
    (this, "Complete todos los campos y seleccione correctamente",
            "Complete",JOptionPane.ERROR_MESSAGE);
    }else {
    	if(this.saved==false) {
    	 Medico.Agregar_Medico(Nombre, Apellido, ID_Especialidad);
    	}
    	
    	 int ID_MaxM = 0 ;
    	 try {
         	ResultSet rs =Conexion.consulta("SELECT MAX(ID_Medico) FROM Medico");
         	while(rs.next()) {
         		ID_MaxM=rs.getInt(1);
         	}
         	}catch(Exception e) {
         		
         	}  
    	
    	 if(this.saved==true) {
    		 Medico.Actualizar_Medico(ID_MaxM, Nombre, Apellido, ID_Especialidad);
    	 }
    	 if(this.saved==false) {
    	 
    	 String Name = Nombre.toLowerCase()+ID_MaxM;
    	 AgregarUsuarioMedico AUM = new AgregarUsuarioMedico(null, true);
         AUM.setNombreUsuario(Name);
         AUM.setVisible(true);
         int ID_MaxU = 0 ;
         try{
             resultado = Conexion.consulta("Select Max(ID_Usuario) from Usuario");
             
             while(resultado.next()){
                 ID_MaxU = resultado.getInt(1);
             }
              
          }catch(SQLException ex){}
           
        
          Medico.Usuario_Medico(ID_MaxM, ID_MaxU, Name);   
          this.ID_M = ID_MaxM ;
          }
    	 this.saved=true;
    	 jButton2.setText("Modificar Horario");
    }
        
    }
    /**Author: acastellanos
     * Issue: #4
     * Motive: Change the method 
     * **/
    public void GuardarHorario(){
        String Nombre = txtNombre.getText().trim();
        String Apellido = txtApellido.getText().trim();
        int cmbEsp = cmbEspecialidad.getSelectedIndex();
        int ID_Especialidad = ID_Esp[cmbEsp];
     /*   String HoraInicio = (String) cmbDesde.getSelectedItem();
        String HoraFinal = (String) cmbHasta.getSelectedItem();
        boolean L = ckL.isSelected();
        boolean M = ckM.isSelected();
        boolean X = ckX.isSelected();
        boolean J = ckJ.isSelected();
        boolean V = ckV.isSelected();
        boolean S = ckS.isSelected();
        boolean D = ckD.isSelected();
        
        int HRi = cmbDesde.getSelectedIndex();
        int HRs = cmbHasta.getSelectedIndex();
        
        if(HRi>HRs){
                    JOptionPane.showMessageDialog
        (this, "La hora de salida no puede ser menor que la de entrada, y la hora de entrada no puede ser mayor que"
                + " la de salida",
                "Seleccione correctamente",JOptionPane.ERROR_MESSAGE);
                    return;
        }
        
             */
        
        if("".equals(Nombre)||"".equals(Apellido)||cmbEsp==0)
                //||"<Seleccione>".equals(HoraFinal)
           //     ||"<Seleccione>".equals(HoraInicio))
        {
                    JOptionPane.showMessageDialog
        (this, "Complete todos los campos y seleccione correctamente",
                "Complete",JOptionPane.ERROR_MESSAGE);
        }
        else{
            if(this.saved==false) {
            Horario H = new Horario(null, true);
            H.setAM(this);
            H.setNombre(Nombre);
            H.setApellido(Apellido);
            H.setID_Especialidad(ID_Especialidad);
            H.setVisible(true);
            }else {
            	/*int IDD=0;
            	try {
            	ResultSet rs =Conexion.consulta("SELECT MAX(ID_Medico) FROM Medico");
            	while(rs.next()) {
            		IDD=rs.getInt(0);
            	}
            	}catch(Exception e) {
            		
            	}    */   	
            	 ModificarHorario MH = new ModificarHorario(null, true);
                 MH.setID(this.ID_M);
                 MH.CargarDatos(this.ID_M);
                 MH.setVisible(true);
            }
       //     Limpiar();// TODO add your handling code here:

            }
        
    }
    /**Author: acastellanos
     * Issue: #4
     * Motive: change save method
     * **/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
GuardarHorario(); 
    }//GEN-LAST:event_jButton2ActionPerformed

    ResultSet resultado;
    int ID_Esp [];
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
      
        
     int ID_Especialidad = 0;
     
      try{
         
     resultado = Conexion.consulta("Select Max(ID_Especialidad) from Especialidad");
         
     while(resultado.next()){
         ID_Especialidad = resultado.getInt(1);
     }
     }catch(SQLException ex){
         
     }
        
      
      ID_Especialidad++;
   
      ID_Esp = new int[ID_Especialidad];


       
      ID_Esp [0] = 0; 
      
      int i = 1;
      
      try{
         
     resultado = Conexion.consulta("Select ID_Especialidad, Nombre from Especialidad Where Estado = 1");
         
     while(resultado.next()){
         ID_Esp [i] = resultado.getInt(1);
         cmbEspecialidad.addItem(resultado.getString(2).trim());
         i++;
     }
     }catch(SQLException ex){
         
     }
       
        

// TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameOpened
/**Author: acastellanos
 * Issue: #4
 * Motive: Save doctor before clear fields
 * **/
    public void Limpiar(){
        txtApellido.setText("");
        txtNombre.setText("");
//        cmbDesde.setSelectedIndex(0);
        cmbEspecialidad.setSelectedIndex(0);
        this.saved=false;
  /*     cmbHasta.setSelectedIndex(0);
        ckD.setSelected(false);
        ckJ.setSelected(false);
        ckL.setSelected(false);
        ckM.setSelected(false);
        ckS.setSelected(false);
        ckV.setSelected(false);
        ckX.setSelected(false);*/
    }
    /**Author: acastellanos
     * Issue: #4
     * Motive: Clear fields after save doctor
     * **/
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    	Guardar();
    	Limpiar();        // TODO add your handling code here:

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
char a = evt.getKeyChar();

if(!Character.isLetter(a)&&!Character.isISOControl(a)&&a!=' '){
    evt.consume();
    Toolkit.getDefaultToolkit().beep();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
char a = evt.getKeyChar();

if(!Character.isLetter(a)&&!Character.isISOControl(a)&&a!=' '){
    evt.consume();
    Toolkit.getDefaultToolkit().beep();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoKeyTyped

    /**Author: acastellanos
     * Issue: #4
     * Motive: Add save button
     * **/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbEspecialidad;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
